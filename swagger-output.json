{
  "openapi": "3.1.0",
  "info": {
    "title": "My API",
    "description": "Description",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000/",
      "description": "local server"
    },
    {
      "url": "https://musicstore.onrender.com/",
      "description": "production server"
    }
  ],
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizedUser"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizedUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, missing email, name, password, or username"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "example": "any"
                  },
                  "email": {
                    "example": "any"
                  },
                  "password": {
                    "example": "any"
                  },
                  "username": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login as a user",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizedUser"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TokenizedUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, missing email or password"
          },
          "401": {
            "description": "Unauthorized, invalid credentials"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "example": "any"
                  },
                  "password": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout a user",
        "description": "This endpoint checks for a signed JWT token in an HTTP-only cookie and clears it. It checks the `token` field in the cookie.",
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "user logged out!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "user logged out!"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/v1/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "Fetch all registered users in a database whose role is user (exclude admins)",
        "description": "**ROLE REQUIRED:** admin",
        "responses": {
          "200": {
            "description": "Users successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PasswordlessUser"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PasswordlessUser"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/showMe": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns information about the requesting user based on cookie session",
        "description": "",
        "responses": {
          "200": {
            "description": "User successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/PasswordlessUser"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/PasswordlessUser"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user with id found."
          }
        }
      }
    },
    "/api/v1/users/showMe/withAlbums": {
      "get": {
        "tags": ["Users"],
        "summary": "Fetch a user by id and all albums they purchased.",
        "description": "",
        "responses": {
          "200": {
            "description": "User and their albums purchased fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserWithAlbums"
                    },
                    "purchasedAlbumCount": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserWithAlbums"
                    },
                    "purchasedAlbumCount": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user with id found."
          }
        }
      }
    },
    "/api/v1/users/updateCurrentUser": {
      "patch": {
        "tags": ["Users"],
        "summary": "Fetch the requesting user, update their data and return the updated user.",
        "description": "",
        "responses": {
          "200": {
            "description": "User successfully fetched and updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/PasswordlessUser"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/PasswordlessUser"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error. Need to provide both name and email values."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "example": "any"
                  },
                  "name": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/updateUserPasssword": {
      "patch": {
        "tags": ["Users"],
        "summary": "Fetch the current requesting user by id, update their password and save it to the database.",
        "description": "",
        "responses": {
          "200": {
            "description": "User successfully fetched and password updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Success! Password Updated."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Success! Password Updated."
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error. Need to provide both new and old password values"
          },
          "401": {
            "description": "Error. Invalid credentials."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "example": "any"
                  },
                  "newPassword": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Fetch a user by id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mongo ObjectID of the user to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/PasswordlessUser"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/PasswordlessUser"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Requester forbidden to fetch this user."
          },
          "404": {
            "description": "No user with id found."
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Fetch a user by id and delete user.",
        "description": "**ROLE REQUIRED:** admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully fetched and deleted."
          },
          "404": {
            "description": "No user with id found."
          }
        }
      }
    },
    "/api/v1/albums/": {
      "get": {
        "tags": ["Albums"],
        "summary": "Fetch all albums in a database (with price > $0)",
        "description": "",
        "responses": {
          "200": {
            "description": "Albums successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "albums": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Album"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "albums": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Album"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Albums"],
        "summary": "Create new album and save it to the database",
        "description": "**ROLE REQUIRED:** admin",
        "parameters": [
          {
            "name": "newAlbum",
            "in": "body",
            "description": "Album information to use for creation.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NewAlbum"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Albums was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/Album"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/Album"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "validation error"
          }
        }
      },
      "patch": {
        "tags": ["Albums"],
        "summary": "Update prices of albums passed in req.body",
        "description": "",
        "parameters": [
          {
            "name": "albums to update prices",
            "in": "body",
            "description": "Array of information to use to update album prices",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "5f9d7b3b9d9d9d9d9d9d9d9d"
                  },
                  "price": {
                    "type": "number",
                    "example": 9.99
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Albums prices were successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "albums": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Album"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "albums": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Album"
                      }
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/albums/filter": {
      "get": {
        "tags": ["Albums"],
        "summary": "Fetch paginated list of albums with price > 0, with query parameters for sorting and filtering",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "description": "Number of albums to fetch",
            "default": 10,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "Number of albums to skip (use with limit to page through results)",
            "default": 0,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "description": "Order of results",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "albumName",
            "description": "String to filter results by matching any part of album name (case-insensitive)",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "artistName",
            "description": "String to filter results by matching any part of artist name (case-insensitive)",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered by query parameters and with price more than 0 albums were successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "albums": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Album"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "albums": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Album"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/albums/{id}": {
      "get": {
        "tags": ["Albums"],
        "summary": "Fetch an album by id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mongo ObjectID of the album to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "Album successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/Album"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/Album"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No album with this id was found."
          }
        }
      },
      "patch": {
        "tags": ["Albums"],
        "summary": "Fetch an album by id and update it",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mongo ObjectID of the album to fetch"
          },
          {
            "name": "album properties to update",
            "in": "body",
            "description": "Album information to use for update",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NewAlbum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Album successfully fetched and updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/Album"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/Album"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "400": {
            "description": "validation error"
          },
          "404": {
            "description": "No album with this id was found."
          }
        }
      }
    },
    "/api/v1/albums/{id}/listOfUsersWhoPurchasedThisAlbum": {
      "get": {
        "tags": ["Albums"],
        "summary": "Show all users that purchased this particular album",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Album with users who purchased it was fetched successfully ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/AlbumWithUsers"
                    },
                    "purchasingUsersCount": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "album": {
                      "$ref": "#/components/schemas/AlbumWithUsers"
                    },
                    "purchasingUsersCount": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No album with this id wasfound."
          }
        }
      }
    },
    "/api/v1/orders/": {
      "get": {
        "tags": ["Orders"],
        "summary": "Fetch all orders in a database",
        "description": "**ROLE REQUIRED:** admin",
        "responses": {
          "200": {
            "description": "Orders successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderList"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrderList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Orders"],
        "summary": "Create a new order and process payment",
        "description": "Creates a new order and processes payment using Stripe.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "orderItems": {
                    "example": "any"
                  },
                  "subtotal": {
                    "example": "any"
                  },
                  "tax": {
                    "example": "any"
                  },
                  "total": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Fetch an order by id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mongo ObjectID of the order to fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "Order successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No order with id found."
          }
        }
      },
      "delete": {
        "tags": ["Orders"],
        "summary": "Delete an order by id",
        "description": "**ROLE REQUIRED:** user or admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Mongo ObjectID of the order to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "The order was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Success! Order was deleted"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Success! Order was deleted"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No order with id found."
          }
        }
      }
    },
    "/api/v1/reviews/": {
      "get": {
        "tags": ["Reviews"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/reviews/album/{albumId}": {
      "get": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "album": {
                    "example": "any"
                  },
                  "user": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reviews/{id}": {
      "get": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "example": "any"
                  },
                  "title": {
                    "example": "any"
                  },
                  "comment": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wishlist/": {
      "get": {
        "tags": ["Wishlist"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": ["Wishlist"],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "albums": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wishlist/{wishlist_id}/add_album/{album_id}": {
      "patch": {
        "tags": ["Wishlist"],
        "description": "",
        "parameters": [
          {
            "name": "wishlist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "album_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/wishlist/{wishlist_id}/remove_album/{album_id}": {
      "patch": {
        "tags": ["Wishlist"],
        "description": "",
        "parameters": [
          {
            "name": "wishlist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "album_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/wishlist/{id}": {
      "get": {
        "tags": ["Wishlist"],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/admin/": {
      "get": {
        "tags": ["Admin"],
        "summary": "Admin Home Page",
        "description": "Fetch and render the admin home page.",
        "responses": {
          "200": {
            "description": "Admin home page fetched successfully.",
            "content": {
              "text/html": {}
            }
          }
        }
      }
    },
    "/admin/api/albums": {
      "patch": {
        "tags": ["Admin"],
        "summary": "Update prices of albums passed in req.body",
        "description": "",
        "responses": {
          "200": {
            "description": "Album prices were successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "album": {
                    "$ref": "#/components/schemas/Album"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": [
                {
                  "$ref": "#/components/schemas/UpdatePriceOfAlbums"
                }
              ]
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PasswordlessUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "64d6ca92a15d2e18ab96a2a3"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"]
          },
          "profileImage": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "example": "https://example.com/profile-image.jpg"
              }
            }
          },
          "creditCardInfo": {
            "type": "object",
            "properties": {
              "hashedNumber": {
                "type": "string",
                "example": "1234567890"
              },
              "expiry": {
                "type": "string",
                "example": "12/24"
              },
              "preferredPaymentOption": {
                "type": "string",
                "enum": ["credit card", "paypal", "google pay"]
              }
            }
          }
        },
        "required": ["id", "name", "username", "email", "role"],
        "xml": {
          "name": "PasswordlessUser"
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "idabc123456"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "idabc123456"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "username": {
                "type": "string",
                "example": "johndoe"
              },
              "email": {
                "type": "string",
                "example": "john@example.com"
              },
              "role": {
                "type": "string",
                "enum": ["user", "admin"]
              }
            },
            "required": ["id", "name", "username", "email", "role"]
          },
          "orderStatus": {
            "default": "pending",
            "type": "string",
            "enum": [
              "pending",
              "payment_successful",
              "payment_failed",
              "cancelled",
              "complete"
            ]
          },
          "orderItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "album": {
                  "type": "string",
                  "example": "5f7f1f7a5c3f2b2d9c1b0b9d"
                },
                "quantity": {
                  "type": "number",
                  "example": 2
                },
                "_id": {
                  "type": "string",
                  "example": "idabc12345"
                }
              },
              "required": ["album", "quantity", "_id"]
            }
          },
          "subtotal": {
            "type": "number",
            "example": 9.99
          },
          "tax": {
            "type": "number",
            "example": 0.75
          },
          "total": {
            "type": "number",
            "example": 10.74
          },
          "createdAt": {
            "type": "string",
            "example": "2023-08-08T20:45:00.942Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-08-08T20:45:00.942Z"
          },
          "paymentIntentId": {
            "type": "string",
            "example": "pi_abc123456"
          }
        },
        "required": [
          "_id",
          "user",
          "orderStatus",
          "subtotal",
          "tax",
          "total",
          "createdAt",
          "updatedAt"
        ],
        "xml": {
          "name": "Order"
        }
      },
      "NewOrder": {
        "type": "object",
        "properties": {
          "subtotal": {
            "type": "number",
            "example": 100
          },
          "tax": {
            "type": "number",
            "example": 0.15
          },
          "total": {
            "type": "number",
            "example": 115
          },
          "orderItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "album": {
                  "type": "string",
                  "example": "abcdef12345"
                },
                "quantity": {
                  "type": "number",
                  "example": 2
                }
              }
            }
          }
        },
        "required": ["subtotal", "tax", "total", "orderItems"],
        "xml": {
          "name": "NewOrder"
        }
      },
      "OrderList": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string",
                  "example": "Jane Smith"
                },
                "orderItems": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "album": {
                        "type": "string",
                        "example": "5f7f1f7a5c3f2b2d9c1b0b9d"
                      },
                      "quantity": {
                        "type": "number",
                        "example": 1
                      }
                    }
                  }
                },
                "subtotal": {
                  "type": "number",
                  "example": 14.99
                },
                "tax": {
                  "type": "number",
                  "example": 1.25
                },
                "total": {
                  "type": "number",
                  "example": 16.24
                }
              }
            }
          }
        },
        "xml": {
          "name": "OrderList"
        }
      },
      "UserWithAlbums": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "64d6ca92a15d2e18ab96a2a3"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"]
          },
          "profileImage": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "example": "https://example.com/profile-image.jpg"
              }
            }
          },
          "creditCardInfo": {
            "type": "object",
            "properties": {
              "hashedNumber": {
                "type": "string",
                "example": "1234567890"
              },
              "expiry": {
                "type": "string",
                "example": "12/24"
              },
              "preferredPaymentOption": {
                "type": "string",
                "enum": ["credit card", "paypal", "google pay"]
              }
            }
          },
          "purchasedAlbums": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64ef50c8c5551074444547bc"
                },
                "user": {
                  "type": "string",
                  "example": "64d6ca92a15d2e18ab96a2a3"
                },
                "album": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "64d2a94c793389a43fc5a8d6"
                    },
                    "albumName": {
                      "type": "string",
                      "example": "...Baby one more time"
                    },
                    "artistName": {
                      "type": "string",
                      "example": "Britney Spears"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-08T20:45:00.942Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-17T10:10:42.861Z"
                    },
                    "price": {
                      "type": "number",
                      "example": 20.99
                    },
                    "image": {
                      "type": "string",
                      "example": "https://i.scdn.co/image/ab67616d0000b27371cae34ad5a39bdab78af13e"
                    },
                    "spotifyUrl": {
                      "type": "string",
                      "example": "https://api.spotify.com/v1/albums/6r1lh7fHMB499vGKtIyJLy"
                    },
                    "releaseDate": {
                      "type": "string",
                      "example": "2023-07-28T00:00:00.000Z"
                    },
                    "averageRating": {
                      "type": "number",
                      "example": 0
                    },
                    "numOfReviews": {
                      "type": "number",
                      "example": 0
                    }
                  },
                  "required": [
                    "id",
                    "albumName",
                    "artistName",
                    "createdAt",
                    "updatedAt",
                    "price"
                  ]
                }
              },
              "required": ["_id", "user", "album"]
            }
          }
        },
        "required": [
          "id",
          "name",
          "username",
          "email",
          "role",
          "purchasedAlbums"
        ],
        "xml": {
          "name": "UserWithAlbums"
        }
      },
      "Album": {
        "type": "object",
        "properties": {
          "albumName": {
            "type": "string",
            "example": "The Dark Side of the Moon"
          },
          "artistName": {
            "type": "string",
            "example": "Pink Floyd"
          },
          "price": {
            "type": "number",
            "example": 9.99
          },
          "image": {
            "type": "string",
            "example": "/uploads/example.jpg"
          },
          "releaseDate": {
            "type": "string",
            "example": "2022-03-01T00:00:00.000Z"
          },
          "createdAt": {
            "type": "string",
            "example": "2022-03-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2022-03-01T00:00:00.000Z"
          },
          "category": {
            "type": "string",
            "example": "rock"
          },
          "spotifyUrl": {
            "type": "string",
            "example": "https://open.spotify.com/album/4LH4d3cOWNNsVw41Gqt2kv"
          },
          "averageRating": {
            "type": "number",
            "example": 4.5
          },
          "numOfReviews": {
            "type": "number",
            "example": 2
          }
        },
        "required": ["albumName", "artistName", "spotifyUrl"],
        "xml": {
          "name": "Album"
        }
      },
      "NewAlbum": {
        "type": "object",
        "properties": {
          "albumName": {
            "type": "string",
            "example": "The Dark Side of the Moon"
          },
          "artistName": {
            "type": "string",
            "example": "Pink Floyd"
          },
          "price": {
            "type": "number",
            "example": 9.99
          },
          "image": {
            "type": "string",
            "example": "/uploads/example.jpg"
          },
          "releaseDate": {
            "type": "string",
            "example": "2022-03-01T00:00:00.000Z"
          },
          "category": {
            "type": "string",
            "example": "rock"
          },
          "spotifyUrl": {
            "type": "string",
            "example": "https://open.spotify.com/album/4LH4d3cOWNNsVw41Gqt2kv"
          }
        },
        "required": ["albumName", "artistName", "spotifyUrl"],
        "xml": {
          "name": "NewAlbum"
        }
      },
      "AlbumWithUsers": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64d2a94c793389a43fc5a8d6"
          },
          "artistName": {
            "type": "string",
            "example": "F"
          },
          "albumName": {
            "type": "string",
            "example": "AUSTIN"
          },
          "price": {
            "type": "number",
            "example": 0
          },
          "image": {
            "type": "string",
            "example": "https://i.scdn.co/image/ab67616d0000b27371cae34ad5a39bdab78af13e"
          },
          "releaseDate": {
            "type": "string",
            "example": "2023-07-28T00:00:00.000Z"
          },
          "spotifyUrl": {
            "type": "string",
            "example": "https://api.spotify.com/v1/albums/6r1lh7fHMB499vGKtIyJLy"
          },
          "averageRating": {
            "type": "number",
            "example": 0
          },
          "numOfReviews": {
            "type": "number",
            "example": 0
          },
          "createdAt": {
            "type": "string",
            "example": "2023-08-08T20:45:00.942Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-08-17T10:10:42.861Z"
          },
          "purchasedByUsers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64ef50c8c5551074444547bc"
                },
                "album": {
                  "type": "string",
                  "example": "64d2a94c793389a43fc5a8d6"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64d6ca92a15d2e18ab96a2a3"
                    },
                    "name": {
                      "type": "string",
                      "example": "Akos123123"
                    },
                    "email": {
                      "type": "string",
                      "example": "akos123@example.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "user"
                    },
                    "username": {
                      "type": "string",
                      "example": "akos92"
                    }
                  },
                  "required": ["_id", "name", "email", "username"]
                }
              },
              "required": ["_id", "album", "user"]
            }
          },
          "purchasingUsersCount": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "_id",
          "artistName",
          "albumName",
          "spotifyUrl",
          "createdAt",
          "updatedAt",
          "purchasedByUsers"
        ],
        "xml": {
          "name": "AlbumWithUsers"
        }
      },
      "AdminCredentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "example": "adminPassword"
          }
        },
        "xml": {
          "name": "AdminCredentials"
        }
      }
    }
  }
}
